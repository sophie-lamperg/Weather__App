{"ast":null,"code":"var _jsxFileName = \"/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherPast.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport weatherCard from './weatherCard'; //api\n// import Select, { components } from 'react-select';\n// class API {\n// //https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=50.100193&lon=53.195873&dt=1621026506&appid=7502839bf5a559b85bd11512693a5993\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherPast() {\n  _s();\n\n  const [dataForReq, setDataForReq] = React.useState({\n    lat: '',\n    lon: '',\n    dt: ''\n  });\n  const [cords, setCords] = React.useState([]);\n  const [minDate, setMinDate] = React.useState('');\n  const [maxDate, setMaxDate] = React.useState('');\n  const [weatherInfo, setWeatherInfo] = React.useState({\n    date: '',\n    weather: ''\n  });\n\n  function reqToApi(lat, lot) {\n    console.log('18', lat, lot);\n    return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lot}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`).then(res => res.json()).then(data => console.log(data)).catch(err => console.log(err));\n  }\n\n  React.useEffect(() => {\n    if (cords.length > 0) {\n      const [lat, lot] = cords.split(', ');\n      reqToApi(lat, lot);\n    }\n  }, [cords]);\n  React.useEffect(() => {\n    handleMinDate();\n    handleMaxDate();\n  }, [minDate, maxDate]);\n\n  function handleChange(e) {\n    const {\n      lat,\n      lon,\n      dt\n    } = dataForReq;\n\n    if (e.target === document.querySelector('input[type=date]')) {\n      const dtVal = e.target.value;\n      const dtValUnix = new Date(dtVal).getTime() / 1000;\n      setDataForReq({ ...dataForReq,\n        dt: dtValUnix\n      });\n    } else if (e.target === document.querySelector('select[type=text]')) {\n      const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n      const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n      setDataForReq({ ...dataForReq,\n        lat: latVal,\n        lon: lonVal\n      });\n    }\n  }\n\n  function handleMinDate() {\n    let date = new Date();\n    const minDateUnix = date.setDate(date.getDate() - 5); //unix time\n\n    let minDateUtc = new Date(minDateUnix);\n    setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth() + 1}-${minDateUtc.getDate()}`);\n  }\n\n  function handleMaxDate() {\n    let date = new Date();\n    setMaxDate(`${date.getFullYear()}-0${date.getMonth() + 1}-${date.getDate()}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Past\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          type: \"text\",\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.195873',\n            lon: '50.100193',\n            children: \"\\u0421\\u0430\\u043C\\u0430\\u0440\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.507836',\n            lon: '49.420393',\n            children: \"\\u0422\\u043E\\u043B\\u044C\\u044F\\u0442\\u0442\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '51.533557',\n            lon: '46.034257',\n            children: \"\\u0421\\u0430\\u0440\\u0430\\u0442\\u043E\\u0432\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: minDate,\n          max: maxDate,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"weatherCard\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(WeatherPast, \"LhRZqFC3LPcZlXxGd3b9gXvEF30=\");\n\n_c = WeatherPast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherPast\");","map":{"version":3,"sources":["/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherPast.jsx"],"names":["React","weatherCard","WeatherPast","dataForReq","setDataForReq","useState","lat","lon","dt","cords","setCords","minDate","setMinDate","maxDate","setMaxDate","weatherInfo","setWeatherInfo","date","weather","reqToApi","lot","console","log","fetch","then","res","json","data","catch","err","useEffect","length","split","handleMinDate","handleMaxDate","handleChange","e","target","document","querySelector","dtVal","value","dtValUnix","Date","getTime","latVal","selectedIndex","attributes","lonVal","minDateUnix","setDate","getDate","minDateUtc","getFullYear","getMonth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport weatherCard from './weatherCard';\n//api\n// import Select, { components } from 'react-select';\n\n// class API {\n// //https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=50.100193&lon=53.195873&dt=1621026506&appid=7502839bf5a559b85bd11512693a5993\n    \n// }\n\n\nexport default function WeatherPast(){\n\n    const [dataForReq, setDataForReq] = React.useState({\n        lat: '',\n        lon: '',\n        dt: ''\n    });\n\n    const [cords, setCords] = React.useState([]);\n    const [minDate, setMinDate] = React.useState('');\n    const [maxDate, setMaxDate] = React.useState('');\n    const [weatherInfo, setWeatherInfo] = React.useState({\n        date: '',\n        weather: ''\n    })\n\n    function reqToApi(lat, lot) {\n        console.log('18', lat, lot);\n        return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lot}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n        .then(res => res.json())\n        .then(data => console.log(data))\n        .catch(err => console.log(err))\n    }\n\n    React.useEffect(() => {\n        if(cords.length>0){\n            const [lat, lot] = cords.split(', ')\n            reqToApi(lat, lot);\n        }\n    }, [cords])\n\n    React.useEffect(() => {\n        handleMinDate();\n        handleMaxDate();\n    }, [minDate, maxDate])\n\n    function handleChange(e){\n        const {lat, lon, dt } = dataForReq;\n\n        if (e.target === document.querySelector('input[type=date]')) {\n            const dtVal = e.target.value;\n            const dtValUnix = new Date(dtVal).getTime() / 1000;\n            setDataForReq({...dataForReq, \n                            dt:dtValUnix})\n                            \n        } else if(e.target === document.querySelector('select[type=text]')){\n                const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                setDataForReq({...dataForReq, \n                    lat:latVal,\n                    lon:lonVal})\n        }\n    }\n\n    function handleMinDate(){\n        let date = new Date();\n        const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n        let minDateUtc = new Date(minDateUnix);\n        setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n    }\n\n    function handleMaxDate() {\n        let date = new Date();\n        setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n    }\n    return (\n        <>\n        <h1>Weather Past</h1>\n        <div className=\"form\">\n            <form action=\"\">\n                <select type=\"text\" onChange={handleChange}>\n                    <option lat={'53.195873'} lon={'50.100193'}>Самара</option>\n                    <option lat={'53.507836'} lon={'49.420393'}>Тольятти</option>\n                    <option lat={'51.533557'} lon={'46.034257'}>Саратов</option>\n                </select>\n                <input type=\"date\" min={minDate} max={maxDate} onChange={handleChange}/>\n                <weatherCard />\n            </form>\n        </div>\n        </>\n        \n    )\n}"]},"metadata":{},"sourceType":"module"}