{"ast":null,"code":"var _jsxFileName = \"/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx\";\nimport React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherNexWeek() {\n  /*\n      const [dataForReq, setDataForReq] = React.useState({\n          lat: '',\n          lon: '',\n          dt: ''\n      });\n  \n      const [cords, setCords] = React.useState([]);\n      const [minDate, setMinDate] = React.useState('');\n      const [maxDate, setMaxDate] = React.useState('');\n      const [weatherInfo, setWeatherInfo] = React.useState({\n          date: '',\n          weather: '',\n          icon: ''\n      })\n  \n      const {date, weather, icon} = weatherInfo\n  \n      function reqToApi(lat, lon, dt) {\n          console.log('18', lat, lon);\n          return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n          .then(res => res.json())\n          // .then(data => console.log(data))\n          .then(data => setWeatherInfo({...weatherInfo,\n              date: dt,\n              weather: data.current.temp,\n              icon: data.current.weather[0].icon\n              }))\n          .catch(err => console.log(err))\n      }\n  \n      React.useEffect(() => {\n   \n      }, [weatherInfo])\n  \n      React.useEffect(() => {\n          handleMinDate();\n          handleMaxDate();\n      }, [minDate, maxDate])\n  \n  \n       React.useEffect(() => {\n          const {lat, lon, dt } = dataForReq;\n          if(lat && lon && dt ){\n              reqToApi(lat, lon, dt);\n          }\n      }, [dataForReq])\n  \n      function handleChange(e){\n          const {lat, lon, dt } = dataForReq;\n  \n          if (e.target === document.querySelector('input[type=date]')) {\n              const dtVal = e.target.value;\n              const dtValUnix = new Date(dtVal).getTime() / 1000;\n              setDataForReq({...dataForReq, \n                              dt:dtValUnix})\n                              \n          } else if(e.target === document.querySelector('select[type=text]')){\n                  const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                  const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                  setDataForReq({...dataForReq, \n                      lat:latVal,\n                      lon:lonVal})\n          }\n      }\n  \n      function handleMinDate(){\n          let date = new Date();\n          const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n          let minDateUtc = new Date(minDateUnix);\n          setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n      }\n  \n      function handleMaxDate() {\n          let date = new Date();\n          setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n      }\n      */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather__widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"weather__header\",\n        children: \"7 Days Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__inputs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherCardPlug, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = WeatherNexWeek;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherNexWeek\");","map":{"version":3,"sources":["/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx"],"names":["React","WeatherCard","WeatherCardPlug","WeatherNexWeek"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,eAAe,SAASC,cAAT,GAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFA,eAaU,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAbV;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAsBH;KArGuBA,c","sourcesContent":["import React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\n\n\nexport default function WeatherNexWeek(){\n/*\n    const [dataForReq, setDataForReq] = React.useState({\n        lat: '',\n        lon: '',\n        dt: ''\n    });\n\n    const [cords, setCords] = React.useState([]);\n    const [minDate, setMinDate] = React.useState('');\n    const [maxDate, setMaxDate] = React.useState('');\n    const [weatherInfo, setWeatherInfo] = React.useState({\n        date: '',\n        weather: '',\n        icon: ''\n    })\n\n    const {date, weather, icon} = weatherInfo\n\n    function reqToApi(lat, lon, dt) {\n        console.log('18', lat, lon);\n        return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n        .then(res => res.json())\n        // .then(data => console.log(data))\n        .then(data => setWeatherInfo({...weatherInfo,\n            date: dt,\n            weather: data.current.temp,\n            icon: data.current.weather[0].icon\n            }))\n        .catch(err => console.log(err))\n    }\n\n    React.useEffect(() => {\n \n    }, [weatherInfo])\n\n    React.useEffect(() => {\n        handleMinDate();\n        handleMaxDate();\n    }, [minDate, maxDate])\n\n\n     React.useEffect(() => {\n        const {lat, lon, dt } = dataForReq;\n        if(lat && lon && dt ){\n            reqToApi(lat, lon, dt);\n        }\n    }, [dataForReq])\n\n    function handleChange(e){\n        const {lat, lon, dt } = dataForReq;\n\n        if (e.target === document.querySelector('input[type=date]')) {\n            const dtVal = e.target.value;\n            const dtValUnix = new Date(dtVal).getTime() / 1000;\n            setDataForReq({...dataForReq, \n                            dt:dtValUnix})\n                            \n        } else if(e.target === document.querySelector('select[type=text]')){\n                const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                setDataForReq({...dataForReq, \n                    lat:latVal,\n                    lon:lonVal})\n        }\n    }\n\n    function handleMinDate(){\n        let date = new Date();\n        const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n        let minDateUtc = new Date(minDateUnix);\n        setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n    }\n\n    function handleMaxDate() {\n        let date = new Date();\n        setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n    }\n    */\n    return (\n        <>\n        <div className=\"weather__widget\">\n        <h2 className=\"weather__header\">7 Days Forecast</h2>\n        <div className=\"weather__inputs\">\n            {/* <form action=\"\"> */}\n                {/* <select className=\"weather__select\" type=\"text\">\n                <option selected disabled>Select city</option>\n                    <option lat={'53.195873'} lon={'50.100193'}>Самара</option>\n                    <option lat={'53.507836'} lon={'49.420393'}>Тольятти</option>\n                    <option lat={'51.533557'} lon={'46.034257'}>Саратов</option>\n                    <option lat={'(55.796127'} lon={'49.106405'}>Казань</option>\n                    <option lat={'45.035470'} lon={'38.975313'}>Краснодар</option>\n                </select> */}\n                </div>\n               { (<WeatherCardPlug/>)}\n            {/* </form> */}\n       \n        </div>\n        </>\n        \n    )\n}"]},"metadata":{},"sourceType":"module"}