{"ast":null,"code":"var _jsxFileName = \"/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx\";\nimport React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherNexWeek() {\n  /*\n      const [dataForReq, setDataForReq] = React.useState({\n          lat: '',\n          lon: '',\n          dt: ''\n      });\n  \n      const [cords, setCords] = React.useState([]);\n      const [minDate, setMinDate] = React.useState('');\n      const [maxDate, setMaxDate] = React.useState('');\n      const [weatherInfo, setWeatherInfo] = React.useState({\n          date: '',\n          weather: '',\n          icon: ''\n      })\n  \n      const {date, weather, icon} = weatherInfo\n  \n      function reqToApi(lat, lon, dt) {\n          console.log('18', lat, lon);\n          return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n          .then(res => res.json())\n          // .then(data => console.log(data))\n          .then(data => setWeatherInfo({...weatherInfo,\n              date: dt,\n              weather: data.current.temp,\n              icon: data.current.weather[0].icon\n              }))\n          .catch(err => console.log(err))\n      }\n  \n      React.useEffect(() => {\n   \n      }, [weatherInfo])\n  \n      React.useEffect(() => {\n          handleMinDate();\n          handleMaxDate();\n      }, [minDate, maxDate])\n  \n  \n       React.useEffect(() => {\n          const {lat, lon, dt } = dataForReq;\n          if(lat && lon && dt ){\n              reqToApi(lat, lon, dt);\n          }\n      }, [dataForReq])\n  \n      function handleChange(e){\n          const {lat, lon, dt } = dataForReq;\n  \n          if (e.target === document.querySelector('input[type=date]')) {\n              const dtVal = e.target.value;\n              const dtValUnix = new Date(dtVal).getTime() / 1000;\n              setDataForReq({...dataForReq, \n                              dt:dtValUnix})\n                              \n          } else if(e.target === document.querySelector('select[type=text]')){\n                  const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                  const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                  setDataForReq({...dataForReq, \n                      lat:latVal,\n                      lon:lonVal})\n          }\n      }\n  \n      function handleMinDate(){\n          let date = new Date();\n          const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n          let minDateUtc = new Date(minDateUnix);\n          setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n      }\n  \n      function handleMaxDate() {\n          let date = new Date();\n          setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n      }\n      */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather__widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"weather__header\",\n        children: \"Weather Past\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"weather__select\",\n          type: \"text\",\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            disabled: true,\n            children: \"Select city\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.195873',\n            lon: '50.100193',\n            children: \"\\u0421\\u0430\\u043C\\u0430\\u0440\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.507836',\n            lon: '49.420393',\n            children: \"\\u0422\\u043E\\u043B\\u044C\\u044F\\u0442\\u0442\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '51.533557',\n            lon: '46.034257',\n            children: \"\\u0421\\u0430\\u0440\\u0430\\u0442\\u043E\\u0432\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '(55.796127',\n            lon: '49.106405',\n            children: \"\\u041A\\u0430\\u0437\\u0430\\u043D\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '45.035470',\n            lon: '38.975313',\n            children: \"\\u041A\\u0440\\u0430\\u0441\\u043D\\u043E\\u0434\\u0430\\u0440\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"weather__input\",\n          type: \"date\",\n          placeholder: \"Date\",\n          min: minDate,\n          max: maxDate,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), date && weather && icon ? /*#__PURE__*/_jsxDEV(WeatherCard, {\n        info: weatherInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 46\n      }, this) : /*#__PURE__*/_jsxDEV(WeatherCardPlug, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 86\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = WeatherNexWeek;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherNexWeek\");","map":{"version":3,"sources":["/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx"],"names":["React","WeatherCard","WeatherCardPlug","WeatherNexWeek","handleChange","minDate","maxDate","date","weather","icon","weatherInfo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,eAAe,SAASC,cAAT,GAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCAEQ;AAAQ,UAAA,SAAS,EAAC,iBAAlB;AAAoC,UAAA,IAAI,EAAC,MAAzC;AAAgD,UAAA,QAAQ,EAAEC,YAA1D;AAAA,kCACA;AAAQ,YAAA,QAAQ,MAAhB;AAAiB,YAAA,QAAQ,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAQ,YAAA,GAAG,EAAE,YAAb;AAA2B,YAAA,GAAG,EAAE,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFR,eAUQ;AAAO,UAAA,SAAS,EAAC,gBAAjB;AAAkC,UAAA,IAAI,EAAC,MAAvC;AAA8C,UAAA,WAAW,EAAC,MAA1D;AAAiE,UAAA,GAAG,EAAEC,OAAtE;AAA+E,UAAA,GAAG,EAAEC,OAApF;AAA6F,UAAA,QAAQ,EAAEF;AAAvG;AAAA;AAAA;AAAA;AAAA,gBAVR;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,EAcUG,IAAI,IAAIC,OAAR,IAAmBC,IAAnB,gBAA2B,QAAC,WAAD;AAAa,QAAA,IAAI,EAAIC;AAArB;AAAA;AAAA;AAAA;AAAA,cAA3B,gBAAmE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAd7E;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAuBH;KAtGuBP,c","sourcesContent":["import React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\n\n\nexport default function WeatherNexWeek(){\n/*\n    const [dataForReq, setDataForReq] = React.useState({\n        lat: '',\n        lon: '',\n        dt: ''\n    });\n\n    const [cords, setCords] = React.useState([]);\n    const [minDate, setMinDate] = React.useState('');\n    const [maxDate, setMaxDate] = React.useState('');\n    const [weatherInfo, setWeatherInfo] = React.useState({\n        date: '',\n        weather: '',\n        icon: ''\n    })\n\n    const {date, weather, icon} = weatherInfo\n\n    function reqToApi(lat, lon, dt) {\n        console.log('18', lat, lon);\n        return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n        .then(res => res.json())\n        // .then(data => console.log(data))\n        .then(data => setWeatherInfo({...weatherInfo,\n            date: dt,\n            weather: data.current.temp,\n            icon: data.current.weather[0].icon\n            }))\n        .catch(err => console.log(err))\n    }\n\n    React.useEffect(() => {\n \n    }, [weatherInfo])\n\n    React.useEffect(() => {\n        handleMinDate();\n        handleMaxDate();\n    }, [minDate, maxDate])\n\n\n     React.useEffect(() => {\n        const {lat, lon, dt } = dataForReq;\n        if(lat && lon && dt ){\n            reqToApi(lat, lon, dt);\n        }\n    }, [dataForReq])\n\n    function handleChange(e){\n        const {lat, lon, dt } = dataForReq;\n\n        if (e.target === document.querySelector('input[type=date]')) {\n            const dtVal = e.target.value;\n            const dtValUnix = new Date(dtVal).getTime() / 1000;\n            setDataForReq({...dataForReq, \n                            dt:dtValUnix})\n                            \n        } else if(e.target === document.querySelector('select[type=text]')){\n                const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                setDataForReq({...dataForReq, \n                    lat:latVal,\n                    lon:lonVal})\n        }\n    }\n\n    function handleMinDate(){\n        let date = new Date();\n        const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n        let minDateUtc = new Date(minDateUnix);\n        setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n    }\n\n    function handleMaxDate() {\n        let date = new Date();\n        setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n    }\n    */\n    return (\n        <>\n        <div className=\"weather__widget\">\n        <h2 className=\"weather__header\">Weather Past</h2>\n        <div className=\"weather__inputs\">\n            {/* <form action=\"\"> */}\n                <select className=\"weather__select\" type=\"text\" onChange={handleChange}>\n                <option selected disabled>Select city</option>\n                    <option lat={'53.195873'} lon={'50.100193'}>Самара</option>\n                    <option lat={'53.507836'} lon={'49.420393'}>Тольятти</option>\n                    <option lat={'51.533557'} lon={'46.034257'}>Саратов</option>\n                    <option lat={'(55.796127'} lon={'49.106405'}>Казань</option>\n                    <option lat={'45.035470'} lon={'38.975313'}>Краснодар</option>\n                </select>\n                <input className=\"weather__input\" type=\"date\" placeholder=\"Date\" min={minDate} max={maxDate} onChange={handleChange}/>\n                </div>\n               { (date && weather && icon ? (<WeatherCard info = {weatherInfo}/>) : (<WeatherCardPlug/>))}\n            {/* </form> */}\n       \n        </div>\n        </>\n        \n    )\n}"]},"metadata":{},"sourceType":"module"}