{"ast":null,"code":"var _jsxFileName = \"/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherNexWeek() {\n  _s();\n\n  const [dataForReq, setDataForReq] = React.useState({\n    lat: '',\n    lon: '',\n    dt: ''\n  });\n  React.useEffect(() => {\n    const {\n      lat,\n      lon,\n      dt\n    } = dataForReq;\n\n    if (lat && lon && dt) {\n      reqToApi(lat, lon, dt);\n    }\n  }, [dataForReq]); //https://api.openweathermap.org/data/2.5/onecall?lat=33.44&lon=-94.04&dt=1618317040&appid=7502839bf5a559b85bd11512693a5993\n\n  function reqToApi(lat, lon, dt) {\n    console.log('18', lat, lon);\n    return fetch(`https:api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`).then(res => res.json()) // .then(data => console.log(data))\n    .then(data => setWeatherInfo({ ...weatherInfo,\n      date: dt,\n      weather: data.current.temp,\n      icon: data.current.weather[0].icon\n    })).catch(err => console.log(err));\n  }\n\n  function handleChange(e) {\n    const {\n      lat,\n      lon,\n      dt\n    } = dataForReq;\n\n    if (e.target === document.querySelector('#city__week')) {\n      const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n      const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n      const currentDate = new Date();\n      const currentDateUnix = currentDate.setDate(currentDate.getDate());\n      setDataForReq({ ...dataForReq,\n        lat: latVal,\n        lon: lonVal,\n        dt: currentDateUnix\n      });\n    }\n  }\n  /*    const [cords, setCords] = React.useState([]);\n      const [minDate, setMinDate] = React.useState('');\n      const [maxDate, setMaxDate] = React.useState('');\n      const [weatherInfo, setWeatherInfo] = React.useState({\n          date: '',\n          weather: '',\n          icon: ''\n      })\n  \n      const {date, weather, icon} = weatherInfo\n  \n      function reqToApi(lat, lon, dt) {\n          console.log('18', lat, lon);\n          return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n          .then(res => res.json())\n          // .then(data => console.log(data))\n          .then(data => setWeatherInfo({...weatherInfo,\n              date: dt,\n              weather: data.current.temp,\n              icon: data.current.weather[0].icon\n              }))\n          .catch(err => console.log(err))\n      }\n  \n      React.useEffect(() => {\n   \n      }, [weatherInfo])\n  \n      React.useEffect(() => {\n          handleMinDate();\n          handleMaxDate();\n      }, [minDate, maxDate])\n  \n  \n      \n  \n     \n      function handleMinDate(){\n          let date = new Date();\n          const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n          let minDateUtc = new Date(minDateUnix);\n          setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n      }\n  \n      function handleMaxDate() {\n          let date = new Date();\n          setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n      }\n      */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather__widget\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"weather__header\",\n        children: \"7 Days Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather__inputs\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"city__week\",\n          className: \"weather__select\",\n          type: \"text\",\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            disabled: true,\n            children: \"Select city\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.195873',\n            lon: '50.100193',\n            children: \"\\u0421\\u0430\\u043C\\u0430\\u0440\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '53.507836',\n            lon: '49.420393',\n            children: \"\\u0422\\u043E\\u043B\\u044C\\u044F\\u0442\\u0442\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '51.533557',\n            lon: '46.034257',\n            children: \"\\u0421\\u0430\\u0440\\u0430\\u0442\\u043E\\u0432\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '55.796127',\n            lon: '49.106405',\n            children: \"\\u041A\\u0430\\u0437\\u0430\\u043D\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            lat: '45.035470',\n            lon: '38.975313',\n            children: \"\\u041A\\u0440\\u0430\\u0441\\u043D\\u043E\\u0434\\u0430\\u0440\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WeatherCardPlug, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(WeatherNexWeek, \"OGgb80HbtDUQnyoIBwY0RoDbt5U=\");\n\n_c = WeatherNexWeek;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherNexWeek\");","map":{"version":3,"sources":["/Users/sophiastetsura/Desktop/mercury/weather__app/src/comp/weatherNextWeek.jsx"],"names":["React","WeatherCard","WeatherCardPlug","WeatherNexWeek","dataForReq","setDataForReq","useState","lat","lon","dt","useEffect","reqToApi","console","log","fetch","then","res","json","data","setWeatherInfo","weatherInfo","date","weather","current","temp","icon","catch","err","handleChange","e","target","document","querySelector","latVal","selectedIndex","attributes","value","lonVal","currentDate","Date","currentDateUnix","setDate","getDate"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,eAAe,SAASC,cAAT,GAAyB;AAAA;;AAEpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,KAAK,CAACM,QAAN,CAAe;AAC/CC,IAAAA,GAAG,EAAE,EAD0C;AAE/CC,IAAAA,GAAG,EAAE,EAF0C;AAG/CC,IAAAA,EAAE,EAAE;AAH2C,GAAf,CAApC;AAMAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,UAAM;AAACH,MAAAA,GAAD;AAAMC,MAAAA,GAAN;AAAWC,MAAAA;AAAX,QAAkBL,UAAxB;;AACA,QAAGG,GAAG,IAAIC,GAAP,IAAcC,EAAjB,EAAqB;AACjBE,MAAAA,QAAQ,CAACJ,GAAD,EAAMC,GAAN,EAAWC,EAAX,CAAR;AACH;AACJ,GALD,EAKG,CAACL,UAAD,CALH,EARoC,CAexC;;AACI,WAASO,QAAT,CAAkBJ,GAAlB,EAAuBC,GAAvB,EAA4BC,EAA5B,EAAgC;AAC5BG,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBN,GAAlB,EAAuBC,GAAvB;AACA,WAAOM,KAAK,CAAE,qDAAoDP,GAAI,QAAOC,GAAI,OAAMC,EAAG,yCAA9E,CAAL,CACNM,IADM,CACDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADN,EAEP;AAFO,KAGNF,IAHM,CAGDG,IAAI,IAAIC,cAAc,CAAC,EAAC,GAAGC,WAAJ;AACzBC,MAAAA,IAAI,EAAEZ,EADmB;AAEzBa,MAAAA,OAAO,EAAEJ,IAAI,CAACK,OAAL,CAAaC,IAFG;AAGzBC,MAAAA,IAAI,EAAEP,IAAI,CAACK,OAAL,CAAaD,OAAb,CAAqB,CAArB,EAAwBG;AAHL,KAAD,CAHrB,EAQNC,KARM,CAQAC,GAAG,IAAIf,OAAO,CAACC,GAAR,CAAYc,GAAZ,CARP,CAAP;AASH;;AAED,WAASC,YAAT,CAAsBC,CAAtB,EAAwB;AACpB,UAAM;AAACtB,MAAAA,GAAD;AAAMC,MAAAA,GAAN;AAAWC,MAAAA;AAAX,QAAkBL,UAAxB;;AAEJ,QAAGyB,CAAC,CAACC,MAAF,KAAaC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAhB,EAAsD;AAC1C,YAAMC,MAAM,GAAGJ,CAAC,CAACC,MAAF,CAASD,CAAC,CAACC,MAAF,CAASI,aAAlB,EAAiCC,UAAjC,CAA4C5B,GAA5C,CAAgD6B,KAA/D;AACA,YAAMC,MAAM,GAAGR,CAAC,CAACC,MAAF,CAASD,CAAC,CAACC,MAAF,CAASI,aAAlB,EAAiCC,UAAjC,CAA4C3B,GAA5C,CAAgD4B,KAA/D;AACA,YAAME,WAAW,GAAI,IAAIC,IAAJ,EAArB;AACA,YAAMC,eAAe,GAAIF,WAAW,CAACG,OAAZ,CAAoBH,WAAW,CAACI,OAAZ,EAApB,CAAzB;AACArC,MAAAA,aAAa,CAAC,EAAC,GAAGD,UAAJ;AACVG,QAAAA,GAAG,EAAC0B,MADM;AAEVzB,QAAAA,GAAG,EAAC6B,MAFM;AAGV5B,QAAAA,EAAE,EAAC+B;AAHO,OAAD,CAAb;AAKP;AACJ;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,sBACI;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BAEQ;AAAQ,UAAA,EAAE,EAAC,YAAX;AAAwB,UAAA,SAAS,EAAC,iBAAlC;AAAoD,UAAA,IAAI,EAAC,MAAzD;AAAgE,UAAA,QAAQ,EAAEZ,YAA1E;AAAA,kCACA;AAAQ,YAAA,QAAQ,MAAhB;AAAiB,YAAA,QAAQ,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI;AAAQ,YAAA,GAAG,EAAE,WAAb;AAA0B,YAAA,GAAG,EAAE,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,cAFA,eAaU,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAbV;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAsBH;;GArHuBzB,c;;KAAAA,c","sourcesContent":["import React from 'react';\nimport WeatherCard from './weatherCard';\nimport WeatherCardPlug from './weatherCardPlug';\n\n\nexport default function WeatherNexWeek(){\n\n    const [dataForReq, setDataForReq] = React.useState({\n        lat: '',\n        lon: '',\n        dt: ''\n    });\n\n    React.useEffect(() => {\n        const {lat, lon, dt } = dataForReq;\n        if(lat && lon && dt ){\n            reqToApi(lat, lon, dt);\n        }\n    }, [dataForReq])\n\n//https://api.openweathermap.org/data/2.5/onecall?lat=33.44&lon=-94.04&dt=1618317040&appid=7502839bf5a559b85bd11512693a5993\n    function reqToApi(lat, lon, dt) {\n        console.log('18', lat, lon);\n        return fetch(`https:api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n        .then(res => res.json())\n        // .then(data => console.log(data))\n        .then(data => setWeatherInfo({...weatherInfo,\n            date: dt,\n            weather: data.current.temp,\n            icon: data.current.weather[0].icon\n            }))\n        .catch(err => console.log(err))\n    }\n\n    function handleChange(e){\n        const {lat, lon, dt } = dataForReq;\n\n    if(e.target === document.querySelector('#city__week')){\n                const latVal = e.target[e.target.selectedIndex].attributes.lat.value;\n                const lonVal = e.target[e.target.selectedIndex].attributes.lon.value;\n                const currentDate =  new Date();\n                const currentDateUnix =  currentDate.setDate(currentDate.getDate());\n                setDataForReq({...dataForReq, \n                    lat:latVal,\n                    lon:lonVal,\n                    dt:currentDateUnix\n                })\n        }\n    }\n\n\n/*    const [cords, setCords] = React.useState([]);\n    const [minDate, setMinDate] = React.useState('');\n    const [maxDate, setMaxDate] = React.useState('');\n    const [weatherInfo, setWeatherInfo] = React.useState({\n        date: '',\n        weather: '',\n        icon: ''\n    })\n\n    const {date, weather, icon} = weatherInfo\n\n    function reqToApi(lat, lon, dt) {\n        console.log('18', lat, lon);\n        return fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${dt}&appid=7502839bf5a559b85bd11512693a5993`)\n        .then(res => res.json())\n        // .then(data => console.log(data))\n        .then(data => setWeatherInfo({...weatherInfo,\n            date: dt,\n            weather: data.current.temp,\n            icon: data.current.weather[0].icon\n            }))\n        .catch(err => console.log(err))\n    }\n\n    React.useEffect(() => {\n \n    }, [weatherInfo])\n\n    React.useEffect(() => {\n        handleMinDate();\n        handleMaxDate();\n    }, [minDate, maxDate])\n\n\n    \n\n   \n    function handleMinDate(){\n        let date = new Date();\n        const minDateUnix =  date.setDate(date.getDate()-5); //unix time\n        let minDateUtc = new Date(minDateUnix);\n        setMinDate(`${minDateUtc.getFullYear()}-0${minDateUtc.getMonth()+1}-${minDateUtc.getDate()}`);\n    }\n\n    function handleMaxDate() {\n        let date = new Date();\n        setMaxDate(`${date.getFullYear()}-0${date.getMonth()+1}-${date.getDate()}`);\n    }\n    */\n    return (\n        <>\n        <div className=\"weather__widget\">\n        <h2 className=\"weather__header\">7 Days Forecast</h2>\n        <div className=\"weather__inputs\">\n            {/* <form action=\"\"> */}\n                <select id=\"city__week\" className=\"weather__select\" type=\"text\" onChange={handleChange}>\n                <option selected disabled>Select city</option>\n                    <option lat={'53.195873'} lon={'50.100193'}>Самара</option>\n                    <option lat={'53.507836'} lon={'49.420393'}>Тольятти</option>\n                    <option lat={'51.533557'} lon={'46.034257'}>Саратов</option>\n                    <option lat={'55.796127'} lon={'49.106405'}>Казань</option>\n                    <option lat={'45.035470'} lon={'38.975313'}>Краснодар</option>\n                </select>\n                </div>\n               { (<WeatherCardPlug/>)}\n            {/* </form> */}\n       \n        </div>\n        </>\n        \n    )\n}"]},"metadata":{},"sourceType":"module"}